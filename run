#! /usr/bin/env bash
# by nilsonholger@hyve.org

# settings
BASE_DIR=`dirname $0`



# cleanup
function bvs_clean {
_PWD=$PWD
[ -d build ] && cd build && echo ">>> chdir -> 'build'"

echo ">>> make clean"
[ -r Makefile ] && make clean

DIRS=(./ bvsd libbvs modules)
for i in `ls -d modules/*/ modules/*/*/ 2>/dev/null`
do
	[ $i != "modules/CMakeFiles/" ] && DIRS[${#DIRS[@]}]="$i"
done

echo -n ">>> cmake cleanup:"
for i in ${DIRS[@]}
do
	[ -r $i/CMakeCache.txt ] && rm $i/CMakeCache.txt
	[ -r $i/Makefile ] && rm $i/Makefile && echo -n " $i"
	[ -r $i/cmake_install.cmake ] && rm $i/cmake_install.cmake
	[ -r $i/CMakeFiles ] && rm -r $i/CMakeFiles
done
echo

echo -n ">>> documentation cleanup:"
for i in ${DIRS[@]}
do
	[ -r $i/Doxyfile ] && rm $i/Doxyfile
	[ -r $i/doc ] && rm -r $i/doc && echo -n " $i"
done
echo

echo -n ">>> directory cleanup:"
for (( i = ${#DIRS[@]}-1; i>0; i-- ))
do
	[ -d ${DIRS[i]} ] && rmdir ${DIRS[i]} &> /dev/null && echo -n " ${DIRS[i]}"
done
echo

cd $_PWD
}



# help
function bvs_help {
cat << EOF
usage: $0 [--flags [\$arg]]
       $0 [--debug] [config]

maintenance flags:
  -c|--clean                 run make clean and remove all CMake generated content (for in source builds)
  -h|-?|--help               display this text
  -n|--new-module \$name      create new module blank/frame with given name
  -s|--setup                 initialize all submodules
  -u|--update                pull updates for all submodules

targets:
  [config]                   run 'bvsd' with the given config (default:BVSConfig.txt)
  -d|--debug                 run 'bvsd' in gdb session
  -f|--fifo                  run 'bvsd' reading input from 'bvsd-fifo'
EOF
}



# create new module
function bvs_new_module {
echo ">>> Creating new module!"
[ -z $1 ] && echo ">>> No module name given!" && exit 1
[ -z ${1/*[^[:alnum:]_]*} ] && echo ">>> Module name cannot only contain 'a-z,0-9,_' due to internal processing reasons! Please choose a different name!" && exit 1
[ -r modules/$1 ] && echo ">>> A module of name $1 already exits! Please choose a different name!" && exit 1
ORIG=BVSExampleModule
ORIGC=`echo $ORIG | tr "[:lower:]" "[:upper:]"`
MOD=$1
MODC=`echo $MOD | tr "[:lower:]" "[:upper:]"`
echo ">>> Copying template to $MOD!"
cp -r libbvs/module modules/$MOD
echo ">>> Modifying template!"
cd modules/$MOD
mv $ORIG.h $MOD.h
mv $ORIG.cc $MOD.cc
mv ${ORIG}Config.txt ${MOD}Config.txt
FILES=(CMakeLists.txt $MOD.h $MOD.cc ${MOD}Config.txt)
sed -i -e "s/$ORIG/$MOD/g" ${FILES[@]}
sed -i -e "s/$ORIGC/$MODC/g" ${FILES[@]}
cd - > /dev/null
[ ! -r modules/CMakeLists.txt ] && echo "# enable/disable to be compiled modules here (entries will be created by './run --new-module <MODULE>')" > modules/CMakeLists.txt
echo "#add_subdirectory($MOD)" >> modules/CMakeLists.txt
echo ">>> Created Module $MOD! Please modify modules/CMakeLists.txt to add it to compilation!"
}



# setup
function bvs_setup {
echo ">>> SETUP library and daemon!"
[ ! -d libbvs ] && git submodule add -f git@i14gitlab.anthropomatik.kit.edu:bvs_libbvs.git libbvs || echo ">>> SKIP libbvs!"
[ ! -d bvsd ] && git submodule add -f git@i14gitlab.anthropomatik.kit.edu:bvs_bvsd.git bvsd || echo ">>> SKIP bvsd!"

echo
echo ">>> SELECT modules to install!"
while read LINE; do MODULES[${#MODULES[@]}]=$LINE; done < .bvsmodules
for MOD in "${MODULES[@]}"
do
	eval MOD=($MOD)
	DIR=${MOD[0]}
	REPO=${MOD[1]}
	[ -d modules/$DIR ] && echo ">>> SKIP $DIR!" && continue
	echo
	echo -e ">>> INSTALL $DIR ($REPO)? [y|N] \c"
	read CMD
	[ "$CMD"x != "yx" ] && echo ">>> SKIP $DIR!" && continue
	git submodule add -f $REPO modules/$DIR

	[ ! -r modules/CMakeLists.txt ] && echo "# enable module compilation here (entries created by './run --new-module <MODULE>')" > modules/CMakeLists.txt
	if [ "${#MOD[@]}" -lt 3 ]
	then
		echo "#add_subdirectory(${MOD[0]})" >> modules/CMakeLists.txt
	else
		for i in `eval "echo {2..$[${#MOD[@]}-1]}"`
		do
			echo "#add_subdirectory(${MOD[0]}/${MOD[$i]})" >> modules/CMakeLists.txt
		done
	fi
done

git commit -m "WARNING: DO NOT PUSH THIS COMMIT TO THE DEVELOPMENT REPOSITORY!" &> /dev/null

echo
echo ">>> SETUP complete!"
[ ! -d build ] && echo ">>> ADVICE: for out of source builds, consider using the directory 'build' (see Readme.txt)"
echo ">>> ADVICE: Please modify modules/CMakeLists.txt to enable modules you want to add to compilation!"
echo
}



# run
function bvs_run {
[ -r $BASE_DIR/bin/bvsd ] && BIN_DIR="bin"
[ -r $BASE_DIR/build/bin/bvsd ] && BIN_DIR="build/bin"
[ -z $BIN_DIR ] && echo "bvsd executable not found, run make first... (or use '--help' to show possible usage)" && exit

for i in $@
do
	if [ "$i" = "-d" -o "$i" = "--debug" ]
	then
		GDB="gdb"
		GDBOPTS="--args"
		shift
	fi
	if [ "$i" = "-f" -o "$i" = "--fifo" ]
	then
		[ ! -r $BIN_DIR/bvsd-fifo ] && mkfifo $BIN_DIR/bvsd-fifo
		FIFO='tail -f bvsd-fifo |'
		shift
	fi
done

[ -n "$GDB" -a -r /usr/local/bin/gdb ] && GDB="/usr/local/bin/gdb"
[ $# = 0 ] && CONFIG="BVSConfig.txt" || CONFIG=$1

[ -n "$FIFO" ] && cat << EOF
>>> FIFO ACTIVATED!!!
>>> FIFO located at: $BIN_DIR/bvsd-fifo
>>> FIFO usage e.g.: 'cat - > $BIN_DIR/bvsd-fifo' or 'echo "h" > $BIN_DIR/bvsd-fifo'

EOF

eval "(cd $BASE_DIR/$BIN_DIR && $FIFO $GDB $GDBOPTS ./bvsd --bvs.config=$CONFIG)"
}



# update
function bvs_update {
BASE=$PWD
QUIET='--quiet'
DIRS=(./ `git submodule $QUIET foreach --recursive 'echo " $path\c"'`)
STASHES=()
echo ">>> STASHING CHANGES!"
for i in ${DIRS[@]}
do
	cd "$BASE/$i"
	STATUS=`git status --porcelain --ignore-submodules=all`
	if [ -z "$STATUS" ]
	then
		continue
	else
		echo ">>> -> $i"
		STASHES[${#STASHES[@]}]="$i"
		git stash $QUIET
	fi
done
cd $BASE

echo ">>> UPDATING!"
echo -e ">>> -> bvs: \c"
git pull $QUIET --rebase
git submodule $QUIET foreach --recursive 'echo ">>> -> $path: \c"; git pull $QUIET --rebase || :'

echo ">>> REAPPLYING CHANGES!"
for i in ${STASHES[@]}
do
	echo ">>> -> $i"
	cd $BASE/$i
	git stash pop $QUIET
done
cd $BASE

echo ">>> UPDATE DONE!"
echo ">>> Please solve any merge conflicts if necessary!"
}



case $1 in
	'-c'|'--clean') bvs_clean;;
	'-h'|'-?'|'--help') bvs_help;;
	'-n'|'--new-module') bvs_new_module $2;;
	'-s'|'--setup') bvs_setup;;
	'-u'|'--update') bvs_update;;
	""|*) bvs_run "$@";;
esac
