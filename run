#! /usr/bin/env zsh
# dk@hyve.org

# settings
BASE="ssh://git.hyve.org:119"
BASE_DIR=`dirname $0`



# cleanup
function bvs_clean {
_PWD=$PWD
[ -r build/Makefile ] && cd build && echo ">>> chdir -> 'build'"
echo ">>> make clean"
[ -r Makefile ] && make clean

DIRS="./"
[ -r bvsd ] && DIRS+=" bvsd/"
[ -r libbvs ] && DIRS+=" libbvs/"
[ -r modules ] && DIRS+=" modules/"
for i in `ls -d modules/*/ modules/*/*/`
do
	[ $i != "modules/CMakeFiles/" ] && DIRS+=" $i"
done

echo ">>> cmake cleanup: $DIRS"
eval "DIRS=($DIRS)"
for i in $DIRS
do
	[ -r $i/CMakeCache.txt ] && rm $i/CMakeCache.txt
	[ -r $i/Makefile ] && rm $i/Makefile
	[ -r $i/cmake_install.cmake ] && rm $i/cmake_install.cmake
	[ -r $i/CMakeFiles ] && rm -r $i/CMakeFiles
	#rmdir $i
done

echo ">>> documentation cleanup"
for i in $DIRS
do
	[ -r $i/doc ] && rm -r $i/doc
done

echo ">>> directory cleanup"
for i in {${#DIRS}..2}
do
	rmdir --ignore-fail-on-non-empty $DIRS[i]
done

cd $_PWD
}



# help
function bvs_help {
cat << EOF
usage: $0 [command [\$arg]] [config]

maintenance:
-c|--clean                   run make clean and remove all CMake generated content (for in source builds)
  -h|-?|--help               displays this text
  -n|--new-module \$arg       creates new module blank/frame with given name
  -s|--setup                 this adds libbvs and bvsd

targets:
  [config]                   runs the system with the given config (default:BVSConfig.txt)
  -d|--debug                 runs bvsd in gdb session
EOF
}



# create new module
function bvs_new_module {
[ -z $1 ] && echo "No module name given!" && exit 1
[ -z ${1/*(.|\(|\))*} ] && echo "Module name cannot contain '.','(' or ')' due to internal processing reasons! Please choose a different name!" && exit 1
[ -r modules/$1 ] && echo "A module of name $1 already exits! Please choose a different name!" && exit 1
ORIG=BVSExampleModule
ORIGC=`echo $ORIG | tr "[:lower:]" "[:upper:]"`
MOD=$1
MODC=`echo $MOD | tr "[:lower:]" "[:upper:]"`
cp -r libbvs/module modules/$MOD
cd modules/$MOD
mv $ORIG.h $MOD.h
mv $ORIG.cc $MOD.cc
mv ${ORIG}Config.txt.sample ${MOD}Config.txt.example
FILES=(CMakeLists.txt $MOD.h $MOD.cc ${MOD}Config.txt.example)
sed -i'' -e "s/$ORIG/$MOD/g" $FILES
sed -i'' -e "s/$ORIGC/$MODC/g" $FILES
cd -
echo "#add_subdirectory($MOD)" >> modules/CMakeLists.txt
echo "Created Module $MOD! Please modify modules/CMakeLists.txt to add it to compilation!"
}



# setup
function bvs_setup {
git submodule update --init --recursive
git submodule foreach git checkout master
}



function bvs_run {
if [ "$1" = "-d" -o "$1" = "--debug" ]
then
	GDB="gdb"
	GDBOPTS="--args"
	shift
fi
[ -n "$GDB" -a -r /usr/local/bin/gdb ] && GDB="/usr/local/bin/gdb"
[ -r $BASE_DIR/bin/bvsd ] && BIN_DIR="bin"
[ -r $BASE_DIR/build/bin/bvsd ] && BIN_DIR="build/bin"
[ -z $BIN_DIR ] && echo "bvsd executable not found, run make first..." && exit
[ $# = 0 ] && CONFIG="BVSConfig.txt" || CONFIG=$1
(cd $BASE_DIR/$BIN_DIR && $GDB $GDBOPTS ./bvsd --bvs.config=$CONFIG)
}



case $1 in
	'-c'|'--clean') bvs_clean;;
	'-h'|'-?'|'--help') bvs_help;;
	'-n'|'--new-module') bvs_new_module $2;;
	'-s'|'--setup') bvs_setup;;
	""|*) bvs_run "$@";;
esac
